import pandas as pd
import streamlit as st
import io
import pickle
import numpy as np
from sklearn.preprocessing import StandardScaler, OneHotEncoder, RobustScaler
from sklearn.compose import ColumnTransformer

# –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã streamlit
st.set_page_config(page_title='Sergey Kuznetsov, Ya Practicum project for Kaggle competition',
                   layout='wide',
                   initial_sidebar_state='expanded'
                   )
st.title('–ü—Ä–æ–≤–µ—Ä–∏–º –≤–∞—à–µ —Å–µ—Ä–¥—Ü–µ')
# input
#st.snow() #–¥–æ–±–∞–≤–∏–º —Å–Ω–µ–≥, –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–æ—á–µ–º—É –±—ã –∏ –Ω–µ—Ç?!
st.markdown("<span style='color:lightgrey'>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ—ë–º –∑–¥–æ—Ä–æ–≤—å–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫–æ–π –µ—Å—Ç—å —Ä–∏—Å–∫ —Å–µ—Ä–¥–µ—á–Ω—ã—Ö –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–π.</span>", unsafe_allow_html=True)
lc, rc = st.columns(2)
age = lc.slider('–í–æ–∑—Ä–∞—Å—Ç', 20, 100, 35)
gender = rc.radio("–ü–æ–ª", options=("–ú—É–∂—á–∏–Ω–∞", "–ñ–µ–Ω—â–∏–Ω–∞"), key='gender')
height = lc.slider('–†–æ—Å—Ç (—Å–º)', 150, 210, 175)
weight = rc.slider('–í–µ—Å (–∫–≥)', 47, 150, 75)
ap_hi = lc.slider('–°–∏—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ (–≤–µ—Ä—Ö–Ω–µ–µ) –¥–∞–≤–ª–µ–Ω–∏–µ', 80, 150, 120)
ap_lo = rc.slider('–î–∏–∞—Å—Ç–æ–ª–∏—á–µ—Å–∫–æ–µ (–Ω–∏–∂–Ω–µ–µ) –¥–∞–≤–ª–µ–Ω–∏–µ', 40, 100, 70)

smoke = lc.radio("–ö—É—Ä–∏—Ç–µ?", options=("–ù–µ—Ç", "–î–∞"), key='smoke', horizontal=True)
alco = lc.radio("–ü—å—ë—Ç–µ?", options=("–ù–µ—Ç", "–î–∞"), key='alco', horizontal=True)

cholesterol = rc.selectbox("–£—Ä–æ–≤–µ–Ω—å —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞", ['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π'], key="cholesterol", index=1)
gluc = rc.selectbox("–£—Ä–æ–≤–µ–Ω—å –≥–ª—é–∫–æ–∑—ã –≤ –∫—Ä–æ–≤–∏", ['–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π', '–í—ã—Å–æ–∫–∏–π'], key="gluc", index=1)
active = rc.selectbox("–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", ['–ù–∏–∑–∫–∏–π', '–í—ã—Å–æ–∫–∏–π'], key="active")

# –æ–±—Ä–∞–±–æ—Ç–∫–∞
fl_ap = 0  # —Ñ–ª–∞–∂–æ–∫, –≤–≤–µ—Ä–Ω–æ –ª–∏ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ
if ap_hi == ap_lo:
    st.sidebar.warning('–í–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–≤–Ω–æ –Ω–∏–∂–Ω–µ–º—É')
elif ap_hi < ap_lo:
    st.sidebar.warning('–í–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã—à–µ –Ω–∏–∂–Ω–µ–≥–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ!')
else:
    fl_ap = 1

imt = round(weight / ((height / 100) ** 2), 2)
fl_imt = 0
if height == weight:
    st.sidebar.warning('–í–µ—Å —Ä–∞–≤–µ–Ω —Ä–æ—Å—Ç—É. –¢–∞–∫ –Ω–µ –±—ã–≤–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ!', icon='‚ö†Ô∏è')
    fl_imt = 0
elif imt < 16:
    st.sidebar.warning('–í–∞—à –ò–ú–¢: ' + str(imt) + ', –≤—ã—Ä–∞–∂–µ–Ω–Ω—ã–π –¥–µ—Ñ–∏—Ü–∏—Ç –º–∞—Å—Å—ã —Ç–µ–ª–∞', icon='‚ö†Ô∏è')
    fl_imt = 1
elif (imt >= 16) and (imt < 18.5):
    st.sidebar.warning('–í–∞—à –ò–ú–¢: ' + str(imt) + ', –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è (–¥–µ—Ñ–∏—Ü–∏—Ç) –º–∞—Å—Å–∞ —Ç–µ–ª–∞', icon='‚ö†Ô∏è')
    fl_imt = 1
elif (imt >= 18.5) and (imt <= 25):
    st.sidebar.warning('–í–∞—à –ò–ú–¢: ' + str(imt) + ', –Ω–æ—Ä–º–∞', icon='üëç')
    fl_imt = 1
elif (imt > 25) and (imt <= 30):
    st.sidebar.warning('–í–∞—à –ò–ú–¢: ' + str(imt) + ', –∏–∑–±—ã—Ç–æ—á–Ω–∞—è –º–∞—Å—Å–∞ —Ç–µ–ª–∞ (–ø—Ä–µ–¥–æ–∂–∏—Ä–µ–Ω–∏–µ)', icon='‚ö†Ô∏è')
    fl_imt = 1
elif (imt > 30) and (imt <= 35):
    st.sidebar.warning('–í–∞—à –ò–ú–¢: ' + str(imt) + ', –æ–∂–∏—Ä–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç–µ–ø–µ–Ω–∏', icon='‚ö†Ô∏è')
    fl_imt = 1
elif (imt > 35) and (imt <= 40):
    st.sidebar.warning('–í–∞—à –ò–ú–¢: ' + str(imt) + ', –æ–∂–∏—Ä–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å—Ç–µ–ø–µ–Ω–∏', icon='‚ö†Ô∏è')
    fl_imt = 1
elif (imt > 40) and (imt <= 60):
    st.sidebar.warning('–í–∞—à –ò–ú–¢: ' + str(imt) + ', –æ–∂–∏—Ä–µ–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–µ–ø–µ–Ω–∏', icon='‚ö†Ô∏è')
    fl_imt = 1
else:
    st.sidebar.warning('–í–∞—à –ò–ú–¢: ' + str(imt) + ', —Ç–∞–∫ –Ω–µ –±—ã–≤–∞–µ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ!', icon='‚ö†Ô∏è')
    fl_imt = 0

if (fl_ap == 1) and (fl_imt == 1):
    #XGBoost –Ω–µ —Ö–æ—á–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è –∫ —Å—Ç—Ä–∏–º–ª–∏—Ç—É, –ø–æ—ç—Ç–æ–º—É —Å–¥–µ–ª–∞–µ–º —Å RFC, –æ–Ω —Ç–æ–∂–µ –Ω–µ–ø–ª–æ—Ö
    def load():
        with open('model_XGB.pcl', 'rb') as mod:
            return pickle.load(mod)
    model_test = load()





    #–ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–æ–¥–µ–ª–∏
    age = age*365.25
    if gender == "–ñ–µ–Ω—â–∏–Ω–∞":
        gender=0
    else:
        gender = 1

    if smoke == "–î–∞":
        smoke = 1
    else:
        smoke = 0

    if alco == "–î–∞":
        alco = 1
    else:
        alco = 0

    if cholesterol == "–ù–∏–∑–∫–∏–π":
        cholesterol = 0
    elif cholesterol == "–°—Ä–µ–¥–Ω–∏–π":
        cholesterol = 1
    else:
        cholesterol = 2

    if gluc == "–ù–∏–∑–∫–∏–π":
        gluc = 0
    elif gluc == "–°—Ä–µ–¥–Ω–∏–π":
        gluc = 1
    else:
        gluc = 2

    if active == '–ù–∏–∑–∫–∏–π':
        active = 0
    else:
        active = 1


    #data = [[age,height,weight,ap_hi,ap_lo,gender,cholesterol,gluc,smoke,alco,active ]]

    data = pd.DataFrame({'age': age,
                  'height': height,
                  'weight': weight,
                  'ap_hi': ap_hi,
                  'ap_lo': ap_lo,
                  'gender': gender,
                  'cholesterol': cholesterol,
                  'gluc': gluc,
                  'smoke': smoke,
                  'alco': alco,
                  'active': active
                  }, index=[0])
    #st.write(data.head())
 #   numeric = ['age', 'ap_hi', 'ap_lo', 'height', 'weight']

#    features = pd.read_csv('features.csv')

 #   scaler = RobustScaler()
 #   scaler.fit(features[numeric])
 #   data[numeric] = scaler.transform(data[numeric])

    with open("pipe.pcl", "rb") as f:
        loaded_pipe = pickle.load(f)

    new_data_transformed = loaded_pipe.transform(data)
    numeric = ['age', 'ap_hi', 'ap_lo', 'height', 'weight']
    categorical = ['gender', 'cholesterol', 'gluc', 'smoke', 'alco', 'active']

    column_names = numeric + list(loaded_pipe.named_steps['preprocessor'].named_transformers_["cat"].get_feature_names_out(categorical))
    new_data_transformed_df = pd.DataFrame(new_data_transformed, columns=column_names)

    #st.write(new_data_transformed_df)
    pr = model_test.predict_proba(new_data_transformed_df)[:,1]

    st.sidebar.header('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã')
    pr = round(float(pr*100),2)
    if pr >= 50:
        st.sidebar.warning('–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–∏—Å–∫–∞ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: '+str(pr)+'%', icon='üíî')
        if imt>25:
            st.sidebar.warning('–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–∞—à –≤–µ—Å –∏ –∏–Ω–¥–µ–∫—Å –º–∞—Å—Å—ã —Ç–µ–ª–∞!')
        if (ap_hi > 150) or (ap_hi < 100):
            st.sidebar.warning('–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ –≤–µ—Ä—Ö–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ!')
        if (ap_lo > 90) or (ap_lo < 50):
            st.sidebar.warning('–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–∞—à–µ –Ω–∏–∂–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ!')
        if (cholesterol == 1) or (cholesterol == 2):
            st.sidebar.warning('–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å —Ö–æ–ª–µ—Å—Ç–µ—Ä–∏–Ω–∞ –≤ –∫—Ä–æ–≤–∏!')
    else:
        st.sidebar.write('–†–∏—Å–∫ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–≥–æ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç: ' + str(pr)+'%')
else:
    st.warning('–¢—É—Ç –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∫–æ–≥–¥–∞ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë—Ç–µ –¥–∞–Ω–Ω—ã–µ.')
st.sidebar.write('')
st.sidebar.write('')
st.sidebar.write('')
st.sidebar.write('')
st.sidebar.write('')
st.sidebar.write('')
st.sidebar.write("_–î—Ä—É–≥–∏–µ –ø—Ä–æ–µ–∫—Ç—ã –≤ [–º–æ—ë–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–∞ GitHub](https://github.com/Kuuuzya)_")


